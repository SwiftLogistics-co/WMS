spring:
  application:
    name: wms-adapter-service

  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:5432/${POSTGRES_DB:swiftlog}
    username: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD:example}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0

  kafka:
    bootstrap-servers: ${KAFKA_BROKER:localhost:29092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      properties:
        enable.idempotence: true
        max.in.flight.requests.per.connection: 1
    consumer:
      group-id: wms-adapter-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"

# WMS Adapter specific configuration
wms:
  mock:
    enabled: ${WMS_MOCK_ENABLED:true}
  legacy:
    host: ${WMS_LEGACY_HOST:localhost}
    port: ${WMS_LEGACY_PORT:8888}
    connection-timeout: ${WMS_CONNECTION_TIMEOUT:5000}
    read-timeout: ${WMS_READ_TIMEOUT:10000}
    max-retries: ${WMS_MAX_RETRIES:3}
    retry-delay: ${WMS_RETRY_DELAY:1000}
  
  kafka:
    topics:
      warehouse-events: ${WMS_WAREHOUSE_EVENTS_TOPIC:warehouse-events}
      package-status: ${WMS_PACKAGE_STATUS_TOPIC:package-status}
      dispatch-events: ${WMS_DISPATCH_EVENTS_TOPIC:dispatch-events}

# Security configuration
keycloak:
  auth-server-url: ${KEYCLOAK_URL:http://localhost:8080}
  realm: swifttrack
  resource: wms-adapter-service
  credentials:
    secret: ${WMS_KEYCLOAK_SECRET:secret}
  public-client: false
  security-constraints:
    - authRoles:
        - ROLE_WMS
        - ROLE_WAREHOUSE_OPERATOR
        - ROLE_CUSTOMER_SERVICE
      securityCollections:
        - patterns:
            - /api/wms/**

# Logging configuration
logging:
  level:
    com.swiftlogistics.wms: ${WMS_LOG_LEVEL:INFO}
    org.springframework.kafka: WARN
    org.springframework.retry: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Actuator endpoints for monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

server:
  port: ${WMS_ADAPTER_PORT:8083}
  
  warehouse:
    default-capacity: 1000

# ----------------------------
# Docker-specific overrides
# ----------------------------
---
spring:
  config:
    activate:
      on-profile: docker

  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST:postgres}:5432/${POSTGRES_DB:swiftlog}
    username: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD:example}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2

  redis:
    host: ${REDIS_HOST:redis}
    port: ${REDIS_PORT:6379}

  kafka:
    bootstrap-servers: ${KAFKA_BROKER:redpanda:9092}

keycloak:
  realm: swiftlogic
  url: ${KEYCLOAK_URL:http://keycloak:8080}
  client-id: wms-adapter

# Mock WMS Server Configuration
mock-wms:
  host: ${MOCK_WMS_HOST:localhost}
  port: ${MOCK_WMS_PORT:9999}

# ----------------------------
# Test profile configuration
# ----------------------------
---
spring:
  config:
    activate:
      on-profile: test

  datasource:
    url: jdbc:h2:mem:testdb
    username: sa
    password: 
    driver-class-name: org.h2.Driver

  jpa:
    hibernate:
      ddl-auto: create-drop
    database-platform: org.hibernate.dialect.H2Dialect

  h2:
    console:
      enabled: true

  # Disable Kafka and Redis for tests
  kafka:
    bootstrap-servers: localhost:19092

  redis:
    host: localhost
    port: 16379
  auth-server-url: ${KEYCLOAK_URL:http://keycloak:8080}
